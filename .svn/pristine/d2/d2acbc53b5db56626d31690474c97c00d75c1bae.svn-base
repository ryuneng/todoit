<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE sqlMap
   PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
   "http://ibatis.apache.org/dtd/sql-map-2.dtd">
   
<sqlMap namespace="meeting" >

	<insert id="insertMeeting" parameterClass="vo.Meeting">
		insert into meeting
		(MEETING_NO, MEETING_TITLE, MEETING_MAX_PEOPLE, MEETING_ADDRESS,
		MEETING_PRICE, MEETING_DISCOUNT_PRICE, MEETING_START_DATE, MEETING_END_DATE, MEETING_CONTENT,
		MEETING_APPROVE, MEETING_CATEGORY_NO, USER_NO, IMAGE_NAME, MEETING_LATITUDE, MEETING_LONGITUDE)
		values
		(meeting_seq.nextval, #title#, #maxPeople#, #address#,
		#price#, #discountPrice#, #startDate#, #endDate#, #content#,
		#approve#, #category.no#, #user.no#, #imageName#, 50, 50)
	</insert>
	
	<select id="getMeetingByNo" parameterClass="int" resultClass="vo.Meeting">
		select
			M.MEETING_TITLE				as title,
			M.MEETING_MAX_PEOPLE		as maxPeople,
			M.MEETING_ACTUAL_PEOPLE		as actualPeople,
			M.MEETING_ADDRESS			as address,
			M.MEETING_PRICE				as price,
			M.MEETING_DISCOUNT_PRICE	as discountPrice,
			M.MEETING_START_DATE		as startDate,
			M.MEETING_END_DATE			as endDate,
			M.MEETING_CONTENT			as content,
			M.MEETING_VIEW_CNT			as viewCnt,
			M.MEETING_DELETED			as deleted,
			M.MEETING_CREATED_DATE		as createdDate,
			M.MEETING_UPDATED_DATE		as updatedDate,
			M.MEETING_APPROVE			as approve,
	        M.MEETING_CATEGORY_NO		as "category.no",
	        C.MEETING_CATEGORY_NAME		as "category.name",
	        U.USER_NO					as "user.no",
	        U.USER_NICKNAME				as "user.nickname",
	        M.IMAGE_NAME				as imageName,
	        M.WISH_CNT					as wishCnt,
	        M.SCORE_AVERAGE				as scoreAverage,	
	        M.MEETING_FULL				as full,
	        M.MEETING_LATITUDE			as latitude,
	        M.MEETING_LONGITUDE			as longitude
		from
			MEETING M, USERS U, MEETING_CATEGORIES C
		where
			M.MEETING_NO = #value#
		and M.USER_NO = U.USER_NO
		AND M.MEETING_CATEGORY_NO = C.MEETING_CATEGORY_NO
	</select>
	
	<update id="updateMeetingByNo" parameterClass="vo.Meeting">
		update MEETING
		set
			MEETING_TITLE = #title#,
			MEETING_content = #content#,
			board_deleted = #deleted#,
			board_updated_date = sysdate
		where
			board_no = #no#
	</update>
	
	<!-- 게시글 목록 조회 -->
	<select id="getMeetings" parameterClass="map" resultClass="vo.Meeting">
		select
			A.meeting_no as no,
			A.meeting_title as title,
			A.meeting_max_people as maxPeople,
			A.meeting_actual_people as actualPeople,
			A.meeting_address as address,
			A.meeting_price as price,
			A.meeting_discount_price as discountPrice,
			A.meeting_start_date as startDate,
			A.meeting_end_date as endDate,
			A.meeting_content as content,
			A.meeting_view_cnt as viewCnt,
			A.meeting_deleted as deleted,
			A.meeting_created_date as createdDate,
			A.meeting_updated_date as updatedDate,
			A.meeting_approve as approve,
			C.meeting_category_no as "category.no",
			C.meeting_category_name as "category.name",
			A.user_no as "user.no",
			B.user_name as "user.name",
			A.image_name as imageName,
			A.wish_cnt as wishCnt,
			A.score_average as scoreAverage,
			A.meeting_full as full
		from
			(select
				row_number() over (order by meeting_no desc) num,
				meeting_no,
				meeting_title,
				meeting_max_people,
				meeting_actual_people,
				meeting_address,
				meeting_price,
				meeting_discount_price,
				meeting_start_date,
				meeting_end_date,
				meeting_content,
				meeting_view_cnt,
				meeting_deleted,
				meeting_created_date,
				meeting_updated_date,
				meeting_approve,
				meeting_category_no,
				user_no,
				image_name,
				wish_cnt,
				score_average,
				meeting_full
			 from
			 	meeting
			 where
			 	meeting_deleted = 'N'
			 	<isEqual property="opt" compareValue="title"> <!-- if문 같은 기능(opt가 title일 때 내부작업 실행) -->
			 		and meeting_title like '%' || #keyword# || '%'
			 	</isEqual>
			 	<isEqual property="opt" compareValue="writer">
			 		and user_no in (select user_no
			 						from users
			 						where user_name like '%' || #keyword# || '%')
			 	</isEqual>
			 	<isEqual property="opt" compareValue="content">
			 		and meeting_content like '%' || #keyword# || '%' <!-- * like '%자바%' : 제목에 "자바"가 포함되어 있는 모든 책 -->
			 	</isEqual>											 <!-- * || : 여러 문자열을 연결하는 함수 -->
			) A, users B, meeting_categories C
		where A.num between #begin# and #end#
		and A.user_no = B.user_no
		and A.meeting_category_no = c.meeting_category_no
		order by A.meeting_no desc
	</select>
	
	<!-- 게시글 전체 행 개수 조회 -->
	<select id="getTotalRows" parameterClass="map" resultClass="int">
		select
			count(*)
		from
			meeting
		where
			meeting_deleted = 'N'
			<isEqual property="opt" compareValue="title">
				and meeting_title like '%' || #keyword# || '%'
			</isEqual>
			<isEqual property="opt" compareValue="writer">
				and user_no in (select user_no
								from users
								where user_name = #keyword#)
			</isEqual>
			<isEqual property="opt" compareValue="content">
				and meeting_content like '%' || #keyword# || '%'
			</isEqual>
	</select>
</sqlMap>